#!/usr/bin/perl

use strict;
use warnings;
use OA::Indicator;
use OA::Indicator::DB;

my $oai = new OA::Indicator (verbose => 1);
my $comm = shift (@ARGV);
if (!$comm) {
    &usage ($oai);
}
if ($comm eq 'harvest') {
    my ($year, $type) = @ARGV;
    if (!$oai->valid_year ($year)) {
        if ($year) {
            &usage ($oai, 'invalid year: ' . $year);
        } else {
            &usage ($oai);
        }
    }
    if (!$oai->data_type ($type)) {
        if ($type) {
            &usage ($oai, 'unkmown data type: ' . $type);
        } else {
            &usage ($oai);
        }
    }
    if ($type eq 'bib') {
        foreach my $t (qw(romeo doaj bfi)) {
            if (!-e "/var/lib/oa-indicator/$year/$t") {
                warn ("fatal: please harvest " . $oai->data_type ($t) . " data for $year before harvesting bibliographic data\n");
                warn ("       oa-indicator harvest $t $year\n");
                exit (1);
            }
        }
        if (-e "/var/lib/oa-indicator/$year/$type") {
            &archive_source ($year, $type);
        }
        system ("/usr/sbin/oa-indicator-harvest-$type $year");
    } elsif ($type eq 'mxd') {
        foreach my $t (qw(bib)) {
            if (!-e "/var/lib/oa-indicator/$year/$t") {
                warn ("fatal: please harvest " . $oai->data_type ($t) . " data for $year before harvesting MXD data\n");
                warn ("       oa-indicator harvest $t $year\n");
                exit (1);
            }
        }
        if (-e "/var/lib/oa-indicator/$year/$type") {
            if (&confirm ($oai->data_type ($type), $year)) {
                &archive_source ($year, $type);
            } else {
                $oai->log_main ('f', $oai->data_type ($type) . " re-harvest cancelled");
                exit (1);
            }
        }
        system ("/usr/sbin/oa-indicator-harvest-$type $year");
    } else {
        if (-e "/var/lib/oa-indicator/$year/$type") {
            if (&confirm ($oai->data_type ($type), $year)) {
                &archive_source ($year, $type);
            } else {
                $oai->log_main ('f', $oai->data_type ($type) . " re-harvest cancelled");
            }
        }
        system ("/usr/sbin/oa-indicator-harvest-$type $year");
    }
    exit (0);
}
if ($comm eq 'load') {
    my ($year, $run_type, @desc) = @ARGV;
    if (!$oai->valid_year ($year)) {
        if ($year) {
            &usage ($oai, 'invalid year: ' . $year);
        } else {
            &usage ($oai);
        }
    }
    if (!$oai->run_type ($run_type)) {
        if ($run_type) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        } else {
            &usage ($oai);
        }
    }
    my $desc = join (' ', @desc);
    $oai->log_main ('i', "starting load segment");
    if (system ("/usr/sbin/oa-indicator-load $year $run_type begin $desc")) {
        $oai->log_main ('f', "failed to begin load statement with year: $year and run type: $run_type");
        exit (1);
    }
    my $db = new OA::Indicator::DB ();
    $db->open ($year, $run_type);
    my $rundir = '/var/lib/oa-indicator/runs/' . $db->id;
    if (-e $rundir) {
        $oai->log_main ('w', "run directory '$rundir' already exists, archiving it.");
        my $n = '001';
        while (-e "$rundir-$n.tar.gz") {
            $n = sprintf ('%03d', $n + 1);
        }
        system ("tar cf $rundir-$n.tar --remove-files $rundir; gzip -9 $rundir-$n.tar");
        if (-e $rundir) {
            $oai->log_main ('f', "could not archive run directory: $rundir");
            exit (1);
        }
    }
    mkdir ($rundir, 0775);
    system ("chmod 02775 $rundir");
    my $link = $rundir;
    $link =~ s/\.[0-9]+$//;
    if (-e $link) {
        unlink ($link);
    }
    system ("ln -s $rundir $link");
    $oai->log_file ("$rundir/load.log");
    $oai->log ('i', 'new data load');
    $oai->log ('i', 'loading bfi');
    if (system ("/usr/sbin/oa-indicator-load $year $run_type bfi")) {
        $oai->log ('f', "failed to load bfi: see $rundir/load_bfi.log");
        system ("/usr/sbin/oa-indicator-load $year $run_type end 0 'error loading bfi'");
    }
    $oai->log ('i', 'loading doaj');
    if (system ("/usr/sbin/oa-indicator-load $year $run_type doaj")) {
        $oai->log ('f', "failed to load doaj: see $rundir/load_doaj.log");
        system ("/usr/sbin/oa-indicator-load $year $run_type end 0 'error loading doaj'");
    }
    $oai->log ('i', 'loading mxd');
    if (system ("/usr/sbin/oa-indicator-load $year $run_type mxd")) {
        $oai->log ('f', "failed to load doaj: see $rundir/load_mxd.log");
        system ("/usr/sbin/oa-indicator-load $year $run_type end 0 'error loading mxd'");
    }
    $oai->log ('i', 'loading romeo');
    if (system ("/usr/sbin/oa-indicator-load $year $run_type romeo")) {
        $oai->log ('f', "failed to load doaj: see $rundir/load_romeo.log");
        system ("/usr/sbin/oa-indicator-load $year $run_type end 0 'error loading romeo'");
    }
    $oai->log ('i', 'loading bib');
    if (system ("/usr/sbin/oa-indicator-load $year $run_type bib")) {
        $oai->log ('f', "failed to load doaj: see $rundir/load_bib.log");
        system ("/usr/sbin/oa-indicator-load $year $run_type end 0 'error loading bib'");
    }
    system ("/usr/sbin/oa-indicator-load $year $run_type end 1 success");
    $oai->log ('i', 'done');
    exit (0);
}
if ($comm eq 'segment') {
    my ($year, $run_type, $name) = @ARGV;
    if ($year) {
        if (!$oai->valid_year ($year)) {
            &usage ($oai, 'invalid year: ' . $year);
        }
    } else {
        &usage ($oai);
    }
    if ($run_type) {
        if ($run_type !~ m/^(devel|test|prod)$/) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        }
    } else {
        &usage ($oai);
    }
    $oai->arg ('year', $year);
    my $db = new OA::Indicator::DB ();
    $db->open ($year, $run_type);
    if (!$db->segment_validate ($name)) {
        &usage ($oai, "fatal: invalid segment: $name, valid segments are: " . join (' | ', $db->segments));
    }
    my $rundir = '/var/lib/oa-indicator/runs/' . $db->id;
    $oai->log_file ("$rundir/segment-$name.log");
    $oai->log_main ('i', "starting segment $name, see $rundir/segment-$name.log for details");
    if ($name eq 'scope') {
        require OA::Indicator::Segments::Scope;
        $db->segment_start ('scope');
        my $seg = new OA::Indicator::Segments::Scope ($db->db (), $oai);
        if ($seg->process ()) {
            $db->segment_end ('scope', 1);
        } else {
            $db->segment_end ('scope', 0);
        }
        exit (0);
    }
    if ($name eq 'screen') {
        require OA::Indicator::Segments::Screen;
        $db->segment_start ('screen');
        my $seg = new OA::Indicator::Segments::Screen ($db->db (), $oai);
        if ($seg->process ()) {
            $db->segment_end ('screen', 1);
        } else {
            $db->segment_end ('screen', 0);
        }
        exit (0);
    }
    if ($name eq 'fetch') {
        require OA::Indicator::Segments::Fetch;
        $db->segment_start ('fetch');
        my $seg = new OA::Indicator::Segments::Fetch ($db->db (), $oai);
        if ($seg->process ()) {
            $db->segment_end ('fetch', 1);
        } else {
            $db->segment_end ('fetch', 0);
        }
        exit (0);
    }
    if ($name eq 'classify') {
        require OA::Indicator::Segments::Classify;
        $db->segment_start ('classify');
        my $seg = new OA::Indicator::Segments::Classify ($db->db (), $oai);
        if ($seg->process ()) {
            $db->segment_end ('classify', 1);
        } else {
            $db->segment_end ('classify', 0);
        }
        exit (0);
    }
    $oai->log_main ('f', "un-implemented segment: $name");
}
if ($comm eq 'close') {
    my ($year, $run_type) = @ARGV;
    if ($year) {
        if (!$oai->valid_year ($year)) {
            &usage ($oai, 'invalid year: ' . $year);
        }
    } else {
        &usage ($oai);
    }
    if ($run_type) {
        if ($run_type !~ m/^(devel|test|prod)$/) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        }
    } else {
        &usage ($oai);
    }
    my $db = new OA::Indicator::DB ();
    $db->open ($year, $run_type);
#   FIX add real success checks
    $db->close (1);
    exit (0);
}
if ($comm eq 'spreadsheets') {
    my ($year, $run_type) = @ARGV;
    if ($year) {
        if (!$oai->valid_year ($year)) {
            &usage ($oai, 'invalid year: ' . $year);
        }
    } else {
        &usage ($oai);
    }
    if ($run_type) {
        if ($run_type !~ m/^(devel|test|prod)$/) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        }
    } else {
        &usage ($oai);
    }
    my $db = new OA::Indicator::DB ();
    $db->reuse ($year, $run_type);
    system ("/usr/sbin/oa-indicator-spreadsheets $year $run_type");
    exit (0);
}
if ($comm eq 'release') {
    my ($year, $run_type, $run, $type) = @ARGV;
    if ($year) {
        if (!$oai->valid_year ($year)) {
            &usage ($oai, 'invalid year: ' . $year);
        }
    } else {
        &usage ($oai);
    }
    if ($run_type) {
        if ($run_type !~ m/^(devel|test|prod)$/) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        }
    } else {
        &usage ($oai);
    }
    if ((!$run) || ($run eq 'latest')) {
        $run = '';
    }
    my $db = new OA::Indicator::DB ();
    $db->reuse ($year, $run_type, $run);
    if (($type) && ($type eq 'reset')) {
        $type = 0;
    } else {
        $type = 1;
    }
    $db->release ($type);
    exit (0);
}
if ($comm eq 'status') {
    my ($year, $run_type) = @ARGV;
    if ($year) {
        if (!$oai->valid_year ($year)) {
            &usage ($oai, 'invalid year: ' . $year);
        }
    }
    if ($run_type) {
        if ($run_type !~ m/^(devel|test|prod)$/) {
            &usage ($oai, 'invalid run type: ' . $run_type);
        }
    }
    my $db = new OA::Indicator::DB ();
    foreach my $y ($db->run_years ()) {
        if (($year) && ($y != $year)) {
            next;
        }
        print ("$y\n");
        foreach my $t ($db->run_types ($y)) {
            if (($run_type) && ($t ne $run_type)) {
                next;
            }
            print ("  $t\n");
            my $head = 1;
            foreach my $run ($db->run_runs ($y, $t)) {
                my $rec = $db->run_info ($y, $t, $run);
                if ($head) {
                    $head = 0;
                    printf("    %3s %-19s %-19s %3s %3s %-10s %s\n", 'run', 'start', 'end', 'suc', 'rel', 'errors', 'description');
                }
                printf("    %3d %19s %19s %3d %3d %10s %s\n", $run, &date ($rec->{'start'}), &date ($rec->{'end'}),
                       $rec->{'success'}, $rec->{'released'}, $rec->{'errors'}, $rec->{'description'});
            }
        }
    }
    exit (0);
}
&usage ($oai, "unknown command: $comm");
exit (0);

sub confirm
{
    my ($type, $year) = @_;
    my ($ans);

    print (STDERR "$type data already exists for $year, please confirm that you want to replace that data [N/y]: ");
    chomp ($ans = <STDIN>);
    if ($ans =~ m/^y(es)?$/i) {
        return (1);
    } else {
        return (0);
    }
}

sub archive_source
{
    my ($year, $type) = @_;
    my $n = '01';

    while ((-e "/var/lib/oa-indicator/$year/$type.$n") ||
           (-e "/var/lib/oa-indicator/$year/$type.$n.tar") ||
           (-e "/var/lib/oa-indicator/$year/$type.$n.tar.gz")) {
        $n = sprintf ('%02d', $n + 1);
    }
    if (system ("cd /var/lib/oa-indicator/$year; tar cf $type.$n.tar $type")) {
        die ("fatal: failed to tar existing source:\n" .
             "       cd /var/lib/oa-indicator/$year; tar cf $type.$n.tar $type\n");
    }
    if (system ("gzip -9 /var/lib/oa-indicator/$year/$type.$n.tar")) {
        die ("fatal: failed to gzip existing source:\n" .
             "       gzip /var/lib/oa-indicator/$year/$type.$n.tar\n");
    }
    if (system ("rm -rf /var/lib/oa-indicator/$year/$type")) {
        die ("fatal: failed to remove existing source after archiving:\n" .
             "       rm -rf /var/lib/oa-indicator/$year/$type\n");
    }
}

sub date
{
    my ($time) = @_;
    my ($sec, $min, $hour, $day, $mon, $year) = localtime ($time);

    return (sprintf ("%04d-%02d-%02d %02d:%02d:%02d", 1900 + $year, $mon + 1, $day, $hour, $min, $sec));
}

sub usage
{
    my ($oai, $msg) = @_;

    if ($msg) {
        warn ("\n$msg\n");
    }
    warn ('usage: ao-indicator harvest      <year> <' . join (' | ', $oai->data_types ()) . ">\n");
    warn ('       ao-indicator load         <year> <' . join (' | ', $oai->run_types ()) . "> [description])\n");
    warn ('       ao-indicator segment      <year> <' . join (' | ', $oai->run_types ()) . '> <' . join (' | ', $oai->segments ()) . ">\n");
    warn ('       ao-indicator close        <year> <' . join (' | ', $oai->run_types ()) . ">\n");
    warn ('       ao-indicator spreadsheets <year> <' . join (' | ', $oai->run_types ()) . ">\n");
    warn ('       ao-indicator release      <year> <' . join (' | ', $oai->run_types ()) . "> [run] [reset]\n\n");
    warn ('       ao-indicator status       [year] [' . join (' | ', $oai->run_types ()) . "]\n\n");
    warn ("       valid years are " . $oai->valid_year_range () . "\n\n");
    exit (1);
}

